// 마지막고침 : 2020.11.17
// win32 Visual C 2010 이상컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS
//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y);
void getxy(int *x, int *y);
void clrscr(void);
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void DB_connect();
void Get_tuple();

void sql_error();

EXEC SQL BEGIN DECLARE SECTION;
VARCHAR uid[80];
VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()

void main()
{
	//한글을 사용하기 위한 코드
	_putenv("NLS_LANG=American_America.KO16KSC5601");
	DB_connect();
	Get_tuple();
	EXEC SQL COMMIT WORK RELEASE;
	getch();
}
void DB_connect()
{
	strcpy((char *)uid.arr, "b2018317@//sedb.deu.ac.kr:1521/orcl");
	uid.len = (short)strlen((char *)uid.arr);
	strcpy((char *)pwd.arr, "2018317");
	pwd.len = (short)strlen((char *)pwd.arr);

	EXEC SQL CONNECT : uid IDENTIFIED BY : pwd;

	// connection이 실패했을경우의 처리부분

	if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405) {
		printf("Connect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
	}

	printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}

#define PAGE_NUM 5
void Get_tuple()
{
		/* --------------------------------------------------------------------------
		   Retrieve the current maximum employee number
		-------------------------------------------------------------------------- */
		EXEC SQL BEGIN DECLARE SECTION;
		varchar r_rnum[100];
		varchar r_person[100];
		varchar r_stu_a[100];
		varchar r_stu_b[100];
		varchar r_isa[100];
		varchar r_isb[100];

		char dynstmt[1000];
		EXEC SQL END DECLARE SECTION;

		char no_room[10];
		char no_temp2[10];

		int x, y, count = 0, i;


		/* Register sql_error() as the error handler. */
		EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


		/* 사용자 입력 */
		clrscr();
		print_screen("searchRoom.txt");
		gotoxy(31, 7);

		gets(no_room);
		gotoxy(3, 16);


		/* 실행시킬 SQL 문장*/
		sprintf(dynstmt, "SELECT * FROM ROOM_MANAGE where to_char(R_RNUM) LIKE '%%%s%%' ", no_room);

		/* select 문장이 제대로 구성되어 있는지 화면에 찍어봄 */
		//printf("dynstmt:%s\n", dynstmt);

		EXEC SQL PREPARE S FROM : dynstmt;

		/* cursor 선언 */
		EXEC SQL DECLARE c_cursor CURSOR FOR S;

		/* cursor open */
		EXEC SQL OPEN c_cursor;

		EXEC SQL WHENEVER NOT FOUND DO break;

		x = 5;
		y = 16;

		for (;;)
		{
			EXEC SQL FETCH c_cursor INTO : r_rnum, : r_person, : r_stu_a, : r_stu_b, : r_isa, : r_isb;

			r_rnum.arr[r_rnum.len] = '\0';
			r_person.arr[r_person.len] = '\0';
			r_stu_a.arr[r_stu_a.len] = '\0';
			r_stu_b.arr[r_stu_b.len] = '\0';
			r_isa.arr[r_isa.len] = '\0';
			r_isb.arr[r_isb.len] = '\0';
			gotoxy(x, y);
			printf(" |  %s  |  %s  |  %s  |  %s  |  %s  |  %s  |", r_rnum.arr, r_person.arr, r_stu_a.arr, r_stu_b.arr, r_isa.arr, r_isb.arr);
			y++;
			count++;
			if (count == PAGE_NUM) {
				printf("\n                                  hit any key\n");
				count = 0;
				getch();

				gotoxy(0, 10); //이전 화면 부분 클리어
				for (i = 0; i < PAGE_NUM; i++) {
					printf("                                                          \n");
				}

				y = 10;
			}

		}
		printf("                              (END)\n");

		/* Close the cursor. */
		EXEC SQL CLOSE c_cursor;

		EXEC SQL COMMIT;
	}

	void print_screen(char fname[])
	{
		FILE *fp;
		char line[100];

		if ((fp = fopen(fname, "r")) == NULL) {
			printf("file open error\n");
			getch();
			exit(-1);
		}
		while (1)
		{
			if (fgets(line, 99, fp) == NULL) {
				break;
			}
			printf("%s", line);
		}

		fclose(fp);
	}

	/* --------------------------------------------------------------------------
	int sql_error()

	   errrpt prints the ORACLE error msg and number.
	-------------------------------------------------------------------------- */
	void sql_error(char *msg)
	{
		char err_msg[128];
		size_t buf_len, msg_len;

		EXEC SQL WHENEVER SQLERROR CONTINUE;

		printf("\n%s\n", msg);
		buf_len = sizeof(err_msg);
		sqlglm(err_msg, &buf_len, &msg_len);
		printf("%.*s\n", msg_len, err_msg);

		getch();
		EXEC SQL ROLLBACK WORK;
		//exit(EXIT_FAILURE);
	}
	/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

	void gotoxy(int x, int y)
	{
		COORD Cur = { (SHORT)x, (SHORT)y };

		SetConsoleCursorPosition(STD_HANDLE, Cur);
	}

	void getxy(int *x, int *y)
	{
		CONSOLE_SCREEN_BUFFER_INFO Buf;

		GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
		*x = (int)Buf.dwCursorPosition.X;
		*y = (int)Buf.dwCursorPosition.Y;

	}

	void clrscr(void)
	{
		COORD Cur = { 0, 0 };
		unsigned long dwLen;

		FillConsoleOutputCharacter(STD_HANDLE, ' ', 80 * 25, Cur, &dwLen);
	}

	/*---------------------------------------------------------*/
